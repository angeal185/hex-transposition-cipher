const subKey={0:"8",1:"3",2:"2",3:"c",4:"a",5:"6",6:"4",7:"5",8:"e",9:"f",f:"d",e:"b",d:"0",c:"7",b:"1",a:"9"};function validHex(e){return"string"==typeof e&&/^[A-Fa-f0-9]*$/.test(e)}function sub(e,r,n,t){try{if(!validHex(e))return"invalid hex string";!t&&_.isFunction(n)&&(t=n,n={decode:!1,reverse:!1}),n.decode&&(r=_.invert(r)),n.reverse&&n.decode&&(e=e.split("").reverse().join("")),e=e.split("").filter(function(e){return r.hasOwnProperty(e.toLowerCase())}).map(function(e){return r[e.toLowerCase()].toUpperCase()}).join(""),n.reverse&&!n.decode&&(e=e.split("").reverse().join("")),t(e)}catch(e){if(e)return console.log(e)}}function subSync(e,r,n){try{return validHex(e)?(n||(n.decode=!1,n.reverse=!1),n.decode?r=_.invert(r):n.decode=!1,n.reverse&&n.decode&&(e=e.split("").reverse().join("")),e=e.split("").filter(function(e){return r.hasOwnProperty(e.toLowerCase())}).map(function(e){return r[e.toLowerCase()].toUpperCase()}).join(""),n.reverse&&!n.decode&&(e=e.split("").reverse().join("")),e):"invalid hex string"}catch(e){if(e)return console.log(e)}}function keyGenSync(){try{const e=_.shuffle(_.values(subKey));let r=0,n={};return _.forIn(subKey,function(t,o){n[t]=e[r],r++}),n}catch(e){if(e)return console.log(e)}}function keyGen(e){try{const r=_.shuffle(_.values(subKey));let n=0,t={};_.forIn(subKey,function(e,o){t[e]=r[n],n++}),e(t)}catch(e){if(e)return console.log(e)}}
